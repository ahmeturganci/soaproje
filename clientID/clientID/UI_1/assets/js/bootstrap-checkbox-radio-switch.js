!function (a) { var b = function (a, b) { this.init(a, b) }; b.prototype = { constructor: b, init: function (b, c) { var d = this.$element = a(b); this.options = a.extend({}, a.fn.checkbox.defaults, c), d.before(this.options.template), this.setState() }, setState: function () { var a = this.$element, b = a.closest(".checkbox"); a.prop("disabled") && b.addClass("disabled"), a.prop("checked") && b.addClass("checked") }, toggle: function () { var b = "checked", c = this.$element, d = c.closest(".checkbox"), e = c.prop(b), f = a.Event("toggle"); 0 == c.prop("disabled") && (d.toggleClass(b) && e ? c.removeAttr(b) : c.prop(b, b), c.trigger(f).trigger("change")) }, setCheck: function (b) { var d = "checked", e = this.$element, f = e.closest(".checkbox"), g = "check" == b, h = a.Event(b); f[g ? "addClass" : "removeClass"](d) && g ? e.prop(d, d) : e.removeAttr(d), e.trigger(h).trigger("change") } }; var c = a.fn.checkbox; a.fn.checkbox = function (c) { return this.each(function () { var d = a(this), e = d.data("checkbox"), f = a.extend({}, a.fn.checkbox.defaults, d.data(), "object" == typeof c && c); e || d.data("checkbox", e = new b(this, f)), "toggle" == c && e.toggle(), "check" == c || "uncheck" == c ? e.setCheck(c) : c && e.setState() }) }, a.fn.checkbox.defaults = { template: '<span class="icons"><span class="first-icon fa fa-square-o"></span><span class="second-icon fa fa-check-square-o"></span></span>' }, a.fn.checkbox.noConflict = function () { return a.fn.checkbox = c, this }, a(document).on("click.checkbox.data-api", "[data-toggle^=checkbox], .checkbox", function (b) { var c = a(b.target); "A" != b.target.tagName && (b && b.preventDefault() && b.stopPropagation(), c.hasClass("checkbox") || (c = c.closest(".checkbox")), c.find(":checkbox").checkbox("toggle")) }), a(function () { a('[data-toggle="checkbox"]').each(function () { var b = a(this); b.checkbox() }) }) }(window.jQuery), !function (a) { var b = function (a, b) { this.init(a, b) }; b.prototype = { constructor: b, init: function (b, c) { var d = this.$element = a(b); this.options = a.extend({}, a.fn.radio.defaults, c), d.before(this.options.template), this.setState() }, setState: function () { var a = this.$element, b = a.closest(".radio"); a.prop("disabled") && b.addClass("disabled"), a.prop("checked") && b.addClass("checked") }, toggle: function () { var b = "disabled", c = "checked", d = this.$element, e = d.prop(c), f = d.closest(".radio"), g = d.closest("form").length ? d.closest("form") : d.closest("body"), h = g.find(':radio[name="' + d.attr("name") + '"]'), i = a.Event("toggle"); 0 == d.prop(b) && (h.not(d).each(function () { var d = a(this), e = a(this).closest(".radio"); 0 == d.prop(b) && e.removeClass(c) && d.removeAttr(c).trigger("change") }), 0 == e && f.addClass(c) && d.prop(c, !0), d.trigger(i), e !== d.prop(c) && d.trigger("change")) }, setCheck: function (b) { var c = "checked", d = this.$element, e = d.closest(".radio"), f = "check" == b, g = d.prop(c), h = d.closest("form").length ? d.closest("form") : d.closest("body"), i = h.find(':radio[name="' + d.attr("name") + '"]'), j = a.Event(b); i.not(d).each(function () { var b = a(this), d = a(this).closest(".radio"); d.removeClass(c) && b.removeAttr(c) }), e[f ? "addClass" : "removeClass"](c) && f ? d.prop(c, c) : d.removeAttr(c), d.trigger(j), g !== d.prop(c) && d.trigger("change") } }; var c = a.fn.radio; a.fn.radio = function (c) { return this.each(function () { var d = a(this), e = d.data("radio"), f = a.extend({}, a.fn.radio.defaults, d.data(), "object" == typeof c && c); e || d.data("radio", e = new b(this, f)), "toggle" == c && e.toggle(), "check" == c || "uncheck" == c ? e.setCheck(c) : c && e.setState() }) }, a.fn.radio.defaults = { template: '<span class="icons"><span class="first-icon fa fa-circle-o"></span><span class="second-icon fa fa-dot-circle-o"></span></span>' }, a.fn.radio.noConflict = function () { return a.fn.radio = c, this }, a(document).on("click.radio.data-api", "[data-toggle^=radio], .radio", function (b) { var c = a(b.target); b && b.preventDefault() && b.stopPropagation(), c.hasClass("radio") || (c = c.closest(".radio")), c.find(":radio").radio("toggle") }), a(function () { a('[data-toggle="radio"]').each(function () { var b = a(this); b.radio() }) }) }(window.jQuery), !function (a) { "use strict"; a.fn.bootstrapSwitch = function (b) { var c = { init: function () { return this.each(function () { var c, d, e, f, i, j, b = a(this), g = "", h = b.attr("class"), k = "ON", l = "OFF", m = !1; a.each(["switch-mini", "switch-small", "switch-large"], function (a, b) { h.indexOf(b) >= 0 && (g = b) }), b.addClass("has-switch"), void 0 !== b.data("on") && (i = "switch-" + b.data("on")), void 0 !== b.data("on-label") && (k = b.data("on-label")), void 0 !== b.data("off-label") && (l = b.data("off-label")), void 0 !== b.data("icon") && (m = b.data("icon")), d = a("<span>").addClass("switch-left").addClass(g).addClass(i).html(k), i = "", void 0 !== b.data("off") && (i = "switch-" + b.data("off")), e = a("<span>").addClass("switch-right").addClass(g).addClass(i).html(l), f = a("<label>").html("&nbsp;").addClass(g).attr("for", b.find("input").attr("id")), m && f.html('<i class="' + m + '"></i>'), c = b.find(":checkbox").wrap(a("<div>")).parent().data("animated", !1), b.data("animated") !== !1 && c.addClass("switch-animate").data("animated", !0), c.append(d).append(f).append(e), b.find(">div").addClass(b.find("input").is(":checked") ? "switch-on" : "switch-off"), b.find("input").is(":disabled") && a(this).addClass("deactivate"); var n = function (a) { a.siblings("label").trigger("mousedown").trigger("mouseup").trigger("click") }; b.on("keydown", function (b) { 32 === b.keyCode && (b.stopImmediatePropagation(), b.preventDefault(), n(a(b.target).find("span:first"))) }), d.on("click", function (b) { n(a(this)) }), e.on("click", function (b) { n(a(this)) }), b.find("input").on("change", function (b) { var c = a(this), d = c.parent(), e = c.is(":checked"), f = d.is(".switch-off"); b.preventDefault(), d.css("left", ""), f === e && (e ? d.removeClass("switch-off").addClass("switch-on") : d.removeClass("switch-on").addClass("switch-off"), d.data("animated") !== !1 && d.addClass("switch-animate"), d.parent().trigger("switch-change", { el: c, value: e })) }), b.find("label").on("mousedown touchstart", function (b) { var c = a(this); j = !1, b.preventDefault(), b.stopImmediatePropagation(), c.closest("div").removeClass("switch-animate"), c.closest(".has-switch").is(".deactivate") ? c.unbind("click") : (c.on("mousemove touchmove", function (b) { var c = a(this).closest(".switch"), d = (b.pageX || b.originalEvent.targetTouches[0].pageX) - c.offset().left, e = d / c.width() * 100, f = 25, g = 75; j = !0, e < f ? e = f : e > g && (e = g), c.find(">div").css("left", e - g + "%") }), c.on("click touchend", function (b) { var c = a(this), d = a(b.target), e = d.siblings("input"); b.stopImmediatePropagation(), b.preventDefault(), c.unbind("mouseleave"), j ? e.prop("checked", !(parseInt(c.parent().css("left")) < -25)) : e.prop("checked", !e.is(":checked")), j = !1, e.trigger("change") }), c.on("mouseleave", function (b) { var c = a(this), d = c.siblings("input"); b.preventDefault(), b.stopImmediatePropagation(), c.unbind("mouseleave"), c.trigger("mouseup"), d.prop("checked", !(parseInt(c.parent().css("left")) < -25)).trigger("change") }), c.on("mouseup", function (b) { b.stopImmediatePropagation(), b.preventDefault(), a(this).unbind("mousemove") })) }) }) }, toggleActivation: function () { a(this).toggleClass("deactivate") }, isActive: function () { return !a(this).hasClass("deactivate") }, setActive: function (b) { b ? a(this).removeClass("deactivate") : a(this).addClass("deactivate") }, toggleState: function (b) { var c = a(this).find("input:checkbox"); c.prop("checked", !c.is(":checked")).trigger("change", b) }, setState: function (b, c) { a(this).find("input:checkbox").prop("checked", b).trigger("change", c) }, status: function () { return a(this).find("input:checkbox").is(":checked") }, destroy: function () { var c, b = a(this).find("div"); return b.find(":not(input:checkbox)").remove(), c = b.children(), c.unwrap().unwrap(), c.unbind("change"), c } }; return c[b] ? c[b].apply(this, Array.prototype.slice.call(arguments, 1)) : "object" != typeof b && b ? void a.error("Method " + b + " does not exist!") : c.init.apply(this, arguments) } }(jQuery);